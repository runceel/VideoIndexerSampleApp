// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using VideoIndexerApp.Models.GetVideos;
//
//    var getVideosResult = GetVideosResult.FromJson(jsonString);

namespace VideoIndexerApp.Models.GetVideos
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class GetVideosResult
    {
        [JsonProperty("results")]
        public Result[] Results { get; set; }

        [JsonProperty("nextPage")]
        public NextPage NextPage { get; set; }
    }

    public partial class NextPage
    {
        [JsonProperty("pageSize")]
        public int PageSize { get; set; }

        [JsonProperty("skip")]
        public int Skip { get; set; }

        [JsonProperty("done")]
        public bool Done { get; set; }
    }

    public partial class Result
    {
        [JsonProperty("accountId")]
        public string AccountId { get; set; }

        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("partition")]
        public object Partition { get; set; }

        [JsonProperty("externalId")]
        public object ExternalId { get; set; }

        [JsonProperty("metadata")]
        public object Metadata { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("description")]
        public object Description { get; set; }

        [JsonProperty("created")]
        public string Created { get; set; }

        [JsonProperty("lastModified")]
        public string LastModified { get; set; }

        [JsonProperty("lastIndexed")]
        public string LastIndexed { get; set; }

        [JsonProperty("privacyMode")]
        public string PrivacyMode { get; set; }

        [JsonProperty("userName")]
        public string UserName { get; set; }

        [JsonProperty("isOwned")]
        public bool IsOwned { get; set; }

        [JsonProperty("isBase")]
        public bool IsBase { get; set; }

        [JsonProperty("state")]
        public string State { get; set; }

        [JsonProperty("processingProgress")]
        public string ProcessingProgress { get; set; }

        [JsonProperty("durationInSeconds")]
        public long DurationInSeconds { get; set; }

        [JsonProperty("thumbnailVideoId")]
        public string ThumbnailVideoId { get; set; }

        [JsonProperty("thumbnailId")]
        public Guid ThumbnailId { get; set; }

        [JsonProperty("social")]
        public Social Social { get; set; }

        [JsonProperty("searchMatches")]
        public object[] SearchMatches { get; set; }

        [JsonProperty("indexingPreset")]
        public string IndexingPreset { get; set; }

        [JsonProperty("streamingPreset")]
        public string StreamingPreset { get; set; }

        [JsonProperty("sourceLanguage")]
        public string SourceLanguage { get; set; }
    }

    public partial class Social
    {
        [JsonProperty("likedByUser")]
        public bool LikedByUser { get; set; }

        [JsonProperty("likes")]
        public long Likes { get; set; }

        [JsonProperty("views")]
        public long Views { get; set; }
    }

    public partial class GetVideosResult
    {
        public static GetVideosResult FromJson(string json) => JsonConvert.DeserializeObject<GetVideosResult>(json, VideoIndexerApp.Models.GetVideos.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this GetVideosResult self) => JsonConvert.SerializeObject(self, VideoIndexerApp.Models.GetVideos.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
